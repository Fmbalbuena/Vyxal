package vyxal.lexer

import scala.language.strictEquality

import vyxal.impls.Elements
import vyxal.lexer.Common.{parseToken, withInd, withRange}
import vyxal.lexer.Common.given // For custom whitespace
import vyxal.lexer.TokenType.*
import vyxal.Modifiers

import scala.collection.mutable
import scala.collection.mutable.{ListBuffer, Queue}
import scala.util.matching.Regex

import fastparse.*

/** Lexer for literate mode. Use [[LiterateLexer.apply]] */
private[lexer] object LiterateLexer:
  private val endKeywords = List(
    "endfor",
    "end-for",
    "endwhile",
    "end-while",
    "endlambda",
    "end-lambda",
    "end",
  )

  private val branchKeywords = List(
    ":",
    ",",
    "else",
    "elif",
    "else-if",
    "body",
    "do",
    "branch",
    "->",
    "then",
    "in",
    "using",
  )

  /** Map keywords to their token types */
  private val keywords = Map(
    "close-all" -> TokenType.StructureAllClose
  )

  private val lambdaOpeners = Map(
    "{" -> StructureType.Lambda,
    "lambda" -> StructureType.Lambda,
    "lam" -> StructureType.Lambda,
    "map-lambda" -> StructureType.LambdaMap,
    "map-lam" -> StructureType.LambdaMap,
    "filter-lambda" -> StructureType.LambdaFilter,
    "filter-lam" -> StructureType.LambdaFilter,
    "sort-lambda" -> StructureType.LambdaSort,
    "sort-lam" -> StructureType.LambdaSort,
    "reduce-lambda" -> StructureType.LambdaReduce,
    "reduce-lam" -> StructureType.LambdaReduce,
    "fold-lambda" -> StructureType.LambdaReduce,
    "fold-lam" -> StructureType.LambdaReduce
  )

  /** Keywords for opening structures. Has to be a separate map because while
    * all of them have the same [[TokenType]], they have different values
    * depending on the kind of structure
    */
  private val structOpeners = Map(
    // These can't go in the big map, because that's autogenerated
    "?" -> StructureType.Ternary,
    "?->" -> StructureType.Ternary,
    "if" -> StructureType.IfStatement,
    "for" -> StructureType.For,
    "do-to-each" -> StructureType.For,
    "while" -> StructureType.While,
    "is-there?" -> StructureType.DecisionStructure,
    "does-exist?" -> StructureType.DecisionStructure,
    "is-there" -> StructureType.DecisionStructure,
    "does-exist" -> StructureType.DecisionStructure,
    "any-in" -> StructureType.DecisionStructure,
    "relation" -> StructureType.GeneratorStructure,
    "generate-from" -> StructureType.GeneratorStructure,
    "generate" -> StructureType.GeneratorStructure,
  )

  lazy val literateModeMappings: Map[String, String] =
    Elements.elements.values.view.flatMap { elem =>
      elem.keywords.map(_ -> elem.symbol)
    }.toMap ++ Modifiers.modifiers.view.flatMap { (symbol, mod) =>
      mod.keywords.map(_ -> symbol)
    }.toMap ++ keywords.map { (kw, typ) =>
      kw -> typ.canonicalSBCS.get
    }.toMap ++ endKeywords
      .map(_ -> TokenType.StructureClose.canonicalSBCS.get)
      .toMap ++ branchKeywords
      .map(_ -> TokenType.Branch.canonicalSBCS.get)
      .toMap ++ (lambdaOpeners ++ structOpeners).map { (kw, typ) =>
      kw -> typ.open
    }

  def isList(code: String): Boolean = list.parseAll(code).isRight

  def sbcsifySingle(token: Token): String =
    val Token(tokenType, value, _) = token
    tokenType match
      case GetVar => "#$" + value
      case SetVar => s"#=$value"
      case AugmentVar => s"#>$value"
      case Constant => s"#!$value"
      case Str => s""""$value""""
      case SyntaxTrigraph if value == ":=[" => "#:["
      case Command if !Elements.elements.contains(value) =>
        Elements.symbolFor(value).get
      case _ => tokenType.canonicalSBCS.getOrElse(value)

  /** Convert literate mode code into SBCS mode code */
  def sbcsify(tokens: List[Token]): String =
    val out = StringBuilder()

    for i <- tokens.indices do
      val token @ Token(tokenType, value, _) = tokens(i)
      val sbcs = sbcsifySingle(token)
      out.append(sbcs)

      if i < tokens.length - 1 then
        val next = tokens(i + 1)
        tokenType match
          case Number =>
            if value != "0" && next.tokenType == Number
              && next.value != "." && !value.endsWith(".")
            then out.append(" ")
          case GetVar | SetVar | AugmentVar | Constant =>
            if "[a-zA-Z0-9_]+".r.matches(sbcsifySingle(next)) then
              out.append(" ")
          case _ =>
    end for

    out.toString
  end sbcsify

  def wordChar[$: P]: P[String] = P(CharIn("a-z\\-?").!)

  def litDecimal[$: P]: P[String] =
    ("-".? ~ (Common.int ~ ("." ~ Common.digits).? | "." ~ Common.digits)).!
  def litNumber[$: P]: P[Token] =
    Common
      .number(litDecimal, ("i" ~ !wordChar).!)
      .map { case Token(_, value, range) =>
        val temp = value.replace("i", "ı").replace("_", "")
        val parts =
          if !temp.endsWith("ı") then temp.split("ı").toSeq
          else temp.init.split("ı").toSeq :+ ""
        Token(
          Number,
          parts
            .map(x => if x.startsWith("-") then x.substring(1) + "_" else x)
            .mkString("ı"),
          range
        )
      }

  def contextIndex[$: P]: P[Token] =
    parseToken(ContextIndex, "`" ~ Common.digits ~ "~")

  def lambdaBlock[$: P]: P[List[Token]] =
    P(
      StringIn(
        StructureType.lambdaStructures.map(_.open) ++ lambdaOpeners.keys*
      )
        ~ ( // Keep going until the branch indicating params end, but don't stop at ","
          (!((branch | litBranch).filter(_.value != ",")) ~ singleToken).rep
            .map(_.flatten)
            ~ (branch | litBranch)
        ).?
        ~ (
          !(
            litStructClose | structureSingleClose | structureDoubleClose | structureAllClose
          ) ~ singleToken
        ).rep.map(_.flatten)
        ~ (litStructClose | structureSingleClose | structureDoubleClose | &(
          structureAllClose
        )).?
    ).map { case (opener, openRange) ~ possibleParams ~ body ~ endTok =>
      val openerTok =
        Token(
          StructureOpen,
          // If it's a keyword, map it to SBCS
          lambdaOpeners.get(opener).map(_.open).getOrElse(opener),
          openRange
        )
      val possParams = possibleParams match
        case Some(params ~ branch) =>
          // Branches get turned into `|` when sbcsifying. To preserve commas, turn them into Commands instead
          val paramsWithCommas = params.map(tok =>
            if tok.tokenType == Branch && tok.value == "," then
              Token(Command, ",", tok.range)
            else if tok.tokenType == Command then tok.copy(tokenType = Param)
            else tok
          )
          paramsWithCommas :+ branch
        case None => Nil
      val withoutEnd = openerTok :: (possParams ::: body)
      endTok match
        case Some(tok: Token) => withoutEnd :+ tok
        case _ =>
          // This means there was a StructureAllClose or we hit EOF
          withoutEnd
    }
  end lambdaBlock

  def litListOpen[$: P]: P[Token] = withRange("[").map { case (_, range) =>
    Token(ListOpen, "#[", range)
  }

  def litListClose[$: P]: P[Token] = withRange("]").map { case (_, range) =>
    Token(ListClose, "#]", range)
  }

  def normalGroup[$: P]: P[List[Token]] = "(" ~ tokens ~ ")"

  def elementKeyword[$: P]: P[Token] =
    StringIn(Elements.elements.values.flatMap(_.keywords)).map {
      case (word, range) => Token(Command, word, range)
    }

  def modifierKeyword[$: P]: P[Token] =
    StringIn(Modifiers.modifiers.values.flatMap(_.keywords)).map {
      case (keyword, range) =>
        val mod =
          Modifiers.modifiers.values.find(_.keywords.contains(keyword)).get
        val tokenType = mod.arity match
          case 1 => MonadicModifier
          case 2 => DyadicModifier
          case 3 => TriadicModifier
          case 4 => TetradicModifier
          case _ => SpecialModifier
        Token(tokenType, keyword, range)
    }

  def structOpener[$: P]: P[Token] =
    StringIn(structOpeners.keys).map { case (word, range) =>
      val sbcs = structOpeners(word).open
      Token(StructureOpen, sbcs, range)
    }

  def otherKeyword[$: P]: P[Token] =
    StringIn(keywords.keys).map { case (word, range) =>
      Token(keywords(word), word, range)
    }

  def varName[$: P]: P[String] =
    (CharIn("A-Za-z_") ~ CharsWhileIn("0-9A-Za-z_")).!

  def litGetVariable[$: P]: P[Token] =
    parseToken(GetVar, "$" ~/ varName.?.!)

  def litSetVariable[$: P]: P[Token] =
    parseToken(SetVar, ":=" ~ varName.?.!)

  def litSetConstant[$: P]: P[Token] =
    parseToken(SetConstant, ":!=" ~/ varName.?.!)

  def litAugVariable[$: P]: P[Token] =
    parseToken(AugmentVar, (":>") ~/ varName.?.!)

  def unpackVar[$: P]: P[List[Token]] =
    withRange(":=") ~ list.map { case (_, unpackRange) ~ listTokens =>
      (Token(SyntaxTrigraph, "#:[", unpackRange) :: listTokens.slice(
        1,
        listTokens.size - 1
      )) :+ Token(UnpackClose, "]", listTokens.last.range)
    }

  def list[$: P]: P[List[Token]] =
    parseToken(ListOpen, "[") ~! rep(
      not(raw"[|,\]]".r) ~ singleToken ~
        (branch | litBranch).?
    ) ~ parseToken(ListClose, "]").map { case startTok ~ elems ~ endTok =>
      val middle = elems.flatMap { case elem ~ branch => elem ++ branch }
      (startTok +: middle) :+ endTok
    }

  def litBranch[$: P]: P[Token] = parseToken(Branch, P.stringIn(branchKeywords))

  def litStructClose[$: P]: P[Token] =
    parseToken(StructureClose, P.stringIn(branchKeywords))

  def rawCode[$: P]: P[List[Token]] = withInd("#([^#]|#[^}])*#}".r).map {
    case (value, row, col) =>
      super
        .parseAll(super.tokens, value.substring(1, value.length - 2))
        .map { tokens =>
          tokens.map { tok =>
            tok.copy(range =
              tok.range.copy(
                startRow = row + tok.range.startRow,
                startCol =
                  if tok.range.startRow == 0 then col + tok.range.startCol
                  else tok.range.startCol
              )
            )
          }
        }
        .get
  }

  def singleToken[$: P]: P[List[Token]] =
    P(
      lambdaBlock | list | unpackVar | (litGetVariable | litSetVariable | litSetConstant | litAugVariable
        | elementKeyword | modifierKeyword | structOpener | otherKeyword | litBranch | litStructClose)
        .map(List(_))
        | normalGroup | rawCode | SBCSLexer.token.map(List(_))
    )

  def tokens[$: P]: P[List[Token]] =
    P(singleToken.rep).map(_.flatten)

end LiterateLexer
