üç™ (Cookie) (non-vectorising)
Keywords: cookie
- cookie.
---------------------
! (Factorial | To Uppercase) (vectorising)
Keywords: fact, factorial, to-upper, upper, uppercase, !
- a: num -> a!
- a: str -> a.toUpperCase()
---------------------
#v (Vectorise (Element Form) [Internal Use]) (non-vectorising)
Keywords: 
- *a, f -> f vectorised over however many arguments in a. It is recommended to use the modifier instead
---------------------
$ (Swap) (non-vectorising)
Keywords: swap
- a, b -> b, a
---------------------
% (Modulo | String Formatting) (non-vectorising)
Keywords: mod, modulo, str-format, format, %, strfmt
- a: num, b: num -> a % b
- a: str, b: any -> a.format(b) (replace %s with b if scalar value or each item in b if vector)
---------------------
& (Append) (non-vectorising)
Keywords: append
- a: any, b: any -> list(a) ++ [b]
---------------------
* (Exponentation | Remove Nth Letter | Trim) (vectorising)
Keywords: exp, **, pow, exponent, remove-letter, str-trim
- a: num, b: num -> a ^ b
- a: str, b: num -> a with the bth letter removed
- a: num, b: str -> b with the ath letter removed
- a: str, b: str -> trim b from both sides of a
---------------------
+ (Addition) (vectorising)
Keywords: add, +, plus
- a: num, b: num -> a + b
- a: num, b: str -> a + b
- a: str, b: num -> a + b
- a: str, b: str -> a + b
---------------------
, (Print) (non-vectorising)
Keywords: print, puts, out, println
- a -> printed to stdout
---------------------
- (Subtraction) (vectorising)
Keywords: sub, subtract, minus, str-remove, remove, str-remove-all, remove-all, -
- a: num, b: num -> a - b
- a: str, b: num -> a + b '-'s (or '-'s + a if b < 0)
- a: num, b: str -> a '-'s + b (or b + '-'s if a < 0)
- a: str, b: str -> a with b removed
---------------------
: (Duplicate) (non-vectorising)
Keywords: dup
- a -> a, a
---------------------
; (Pair) (non-vectorising)
Keywords: pair
- a, b -> [a, b]
---------------------
< (Less Than) (vectorising)
Keywords: lt, less, less-than, <, less?, smaller?
- a: num, b: num -> a < b
- a: str, b: num -> a < str(b)
- a: num, b: str -> str(a) < b
- a: str, b: str -> a < b
---------------------
= (Equals) (vectorising)
Keywords: eq, ==, equal, same?, equals?, equal?
- a: any, b: any -> a == b
---------------------
> (Greater Than) (vectorising)
Keywords: gt, greater, greater-than, >, greater?, bigger?
- a: num, b: num -> a > b
- a: str, b: num -> a > str(b)
- a: num, b: str -> str(a) > b
- a: str, b: str -> a > b
---------------------
? (Get Input) (non-vectorising)
Keywords: get-input, input, stdin, readline
- ->  -> input
---------------------
A (All Truthy | All() | Is Vowel?) (non-vectorising)
Keywords: all, is-vowel?
- a: str -> is (a) a vowel? vectorises for strings len > 1
- a: list -> is (a) all truthy?
---------------------
B (Convert From Binary) (non-vectorising)
Keywords: from-binary, bin->dec, bin->decimal
- a: num -> str(a) from binary
- a: str -> int(a, 2)
- a: lst -> int(a, 2), using list of digits
---------------------
C (Count) (non-vectorising)
Keywords: count
- a: any, b: any -> count(b in a)
---------------------
D (Triplicate) (non-vectorising)
Keywords: trip
- a -> [a, a, a]
---------------------
F (Filter by Function | From Base) (non-vectorising)
Keywords: filter, keep-by, from-base, 10->b
- a: fun, b: lst -> Filter b by truthy results of a
- a: lst, b: fun -> Filter a by truthy results of b
- a: num, b: num -> a in base b - list of digits
- a: num, b: str|lst -> a in base with alphabet b
---------------------
M (Map Function | Mold Lists | Multiplicity) (non-vectorising)
Keywords: map, mold, multiplicity, times-divide
- a: any, b: fun -> a.map(b)
- a: fun, b: any -> b.map(a)
- a: lst, b: lst -> a molded to the shape of b
- a: num, b: num -> how many times b divides a
---------------------
N (Negation | Swap Case | First Non-Negative Integer Where Predicate is True) (vectorising)
Keywords: neg, negate, swap-case, caseswap, first-non-negative, first-nonneg, first>-1
- a: num -> -a
- a: str -> a.swapcase()
- a: fun -> first non-negative integer where predicate a is true
---------------------
O (Ord/Chr) (non-vectorising)
Keywords: ord, chr
- a: str -> ord(a)
- a: num -> chr(a)
---------------------
R (Reduce by Function Object | Dyadic Range | Regex Match) (non-vectorising)
Keywords: fun-reduce, reduce, fold-by, range, a->b, regex-match?, re-match?, has-regex-match?, fold
- a: fun, b: any -> reduce iterable b by function a
- a: any, b: fun -> reduce iterable a by function b
- a: num, b: num -> the range [a, b)
- a: str, b: num|str -> does regex pattern b match haystack a?
---------------------
W (Wrap) (non-vectorising)
Keywords: wrap
- a, b, c, ..., -> [a, b, c, ...]
---------------------
_ (Pop and Discard) (non-vectorising)
Keywords: pop, discard
- a ->
---------------------
b (Convert To Binary) (vectorising)
Keywords: to-binary, dec->bin, decimal->bin
- a: num -> convert a to binary
- a: str -> bin(ord(x) for x in a)
---------------------
m (Get Context Variable M) (non-vectorising)
Keywords: get-context-m, context-m, c-var-m, ctx-m, ctx-secondary
- ->  -> context variable m
---------------------
n (Get Context Variable N) (non-vectorising)
Keywords: get-context-n, context-n, c-var-n, ctx-n, ctx-primary
- ->  -> context variable n
---------------------
·∏Ç (Execute lambda without popping | Evaluate as Vyxal without popping) (non-vectorising)
Keywords: peek-call
- a: fun -> Execute a without popping
---------------------
ƒñ (Execute lambda | Evaluate as Vyxal | Power with base 10) (non-vectorising)
Keywords: execute-lambda, evaluate-as-vyxal, power-base-10, call, @
- a: fun -> Execute a
- a: str -> Evaluate a as Vyxal
- a: num -> 10 ** n
---------------------
·π° (Sort by Function Object | Reshape (APL Style)) (non-vectorising)
Keywords: sort-by, sortby, sort-by-fun, sortbyfun, sort-fun, sortfun
- a: fun, b: any -> sort iterable b by function a
- a: any, b: fun -> sort iterable a by function b
---------------------
Œò (Zero Slice Until) (non-vectorising)
Keywords: 0>b, zero-slice, zero-slice-until, take, slice-to, lst-truncate, first-n-items, first
- a: lst, b: num -> [a[0], a[1], ..., a[b-1]]
---------------------
‚ÇÄ (Ten) (non-vectorising)
Keywords: ten
- -> 10
---------------------
‚ÇÅ (Sixteen) (non-vectorising)
Keywords: sixteen
- -> 16
---------------------
‚ÇÇ (Twenty-six) (non-vectorising)
Keywords: twenty-six
- -> 26
---------------------
‚ÇÉ (Thirty-two) (non-vectorising)
Keywords: thirty-two
- -> 32
---------------------
‚ÇÑ (Sixty-four) (non-vectorising)
Keywords: sixty-four
- -> 64
---------------------
‚ÇÖ (One hundred) (non-vectorising)
Keywords: one-hundred
- -> 100
---------------------
‚ÇÜ (One hundred twenty-eight) (non-vectorising)
Keywords: one-hundred-twenty-eight
- -> 128
---------------------
‚Çá (Two hundred fifty-six) (non-vectorising)
Keywords: two-hundred-fifty-six
- -> 256
---------------------
‚Çà (Alphabet) (non-vectorising)
Keywords: alphabet, a-z
- -> "abcdefghijklmnopqrstuvwxyz"
---------------------
‚Çâ (Empty array) (non-vectorising)
Keywords: empty-list, nil-list, new-list
- -> []
---------------------
√ó (Multiplication) (vectorising)
Keywords: mul, multiply, times, str-repeat, *, ring-trans
- a: num, b: num -> a * b
- a: num, b: str -> b repeated a times
- a: str, b: num -> a repeated b times
- a: str, b: str -> ring translate a according to b
---------------------
√∑ (Divide | Split) (vectorising)
Keywords: divide, div, split
- a: num, b: num -> a / b
- a: str, b: str -> Split a on the regex b
---------------------
‚Ä≤
Keywords: *-
Description: Turn the next element (whether that be a structure/modifier/element) into a lambda
‚Ä≤f: Push the equivalent of Œªf} to the stack
---------------------
‚Ä≥
Keywords: **-
Description: Turn the next two elements (whether that be a structure/modifier/element) into a lambda
‚Ä≥fg: Push the equivalent of Œªfg} to the stack
---------------------
v
Keywords: vectorise-, vec-, v-
Description: Vectorises
vf: f but vectorised
---------------------
‚Ä¥
Keywords: ***-
Description: Turn the next three elements (whether that be a structure/modifier/element) into a lambda
‚Ä¥fgh: Push the equivalent of Œªfgh} to the stack
---------------------
‚Å¥
Keywords: ****-
Description: Turn the next four elements (whether that be a structure/modifier/element) into a lambda
‚Å¥fghi: Push the equivalent of Œªfghi} to the stack
---------------------
/
Keywords: foldl-, reduce-, /-, fold-, reduceby-
Description: Reduce a list by an element
/f: reduce by element f
---------------------
